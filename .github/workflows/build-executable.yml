name: Build Executable

on:
  push:
    branches:
      - Main  # Trigger the workflow on push to the main branch (you can adjust the branch as needed)

jobs:
  build:
    runs-on: windows-latest  # Use a Windows runner to build the EXE

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'  # Make sure this is the version you want to use

      # Step 3: Install dependencies (including PyInstaller)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller  # Install PyInstaller
          pip install -r requirements.txt  # Install other dependencies if you have a requirements.txt file

      # Step 4: Create the executable with PyInstaller and add the icon
      - name: Build executable
        run: |
          pyinstaller --onefile --add-data "./files/logo.png;files" --icon="./files/icon.ico" --name AutoPIPE_Automation main.py

      # Step 5: List contents of dist directory (for debugging)
      - name: List dist directory contents
        run: dir dist

      # Step 6: Upload the EXE as an artifact
      - name: Upload EXE as artifact
        uses: actions/upload-artifact@v4
        with:
          name: AutoPIPE_Automation
          path: dist/AutoPIPE_Automation.exe  # Path to the EXE file created by PyInstaller
